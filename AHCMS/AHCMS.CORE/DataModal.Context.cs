//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AHCMS.CORE
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AHCMSEntities : DbContext
    {
        public AHCMSEntities()
            : base("name=AHCMSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Appointment> Appointments { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeRole> EmployeeRoles { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<PatientWalkIn> PatientWalkIns { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Specialization> Specializations { get; set; }
        public virtual DbSet<UserSpecialization> UserSpecializations { get; set; }
    
        public virtual int Delete_Role(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Role", idParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> ForgotPassword(string username, string email)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("ForgotPassword", usernameParameter, emailParameter);
        }
    
        public virtual ObjectResult<Get_EmployeeByRole_Result> Get_EmployeeByRole(string role)
        {
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_EmployeeByRole_Result>("Get_EmployeeByRole", roleParameter);
        }
    
        public virtual ObjectResult<Get_Patient_Result> Get_Patient()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Patient_Result>("Get_Patient");
        }
    
        public virtual ObjectResult<Get_Roles_Result> Get_Roles(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Roles_Result>("Get_Roles", idParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> GetRoleUserExistence(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("GetRoleUserExistence", idParameter);
        }
    
        public virtual int Insert_EmployeeMembership(string employeeID, string reffNo, string username, string password, string emailID, string countryCode, Nullable<long> phoneNumber, string firstName, string middleName, string lastName, string birthDate, string street, string city, string state, string country, string zipcode, string profileImg, string bloodGroup, Nullable<int> gender, string role)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var reffNoParameter = reffNo != null ?
                new ObjectParameter("ReffNo", reffNo) :
                new ObjectParameter("ReffNo", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var phoneNumberParameter = phoneNumber.HasValue ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(long));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var birthDateParameter = birthDate != null ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var zipcodeParameter = zipcode != null ?
                new ObjectParameter("Zipcode", zipcode) :
                new ObjectParameter("Zipcode", typeof(string));
    
            var profileImgParameter = profileImg != null ?
                new ObjectParameter("ProfileImg", profileImg) :
                new ObjectParameter("ProfileImg", typeof(string));
    
            var bloodGroupParameter = bloodGroup != null ?
                new ObjectParameter("BloodGroup", bloodGroup) :
                new ObjectParameter("BloodGroup", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(int));
    
            var roleParameter = role != null ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_EmployeeMembership", employeeIDParameter, reffNoParameter, usernameParameter, passwordParameter, emailIDParameter, countryCodeParameter, phoneNumberParameter, firstNameParameter, middleNameParameter, lastNameParameter, birthDateParameter, streetParameter, cityParameter, stateParameter, countryParameter, zipcodeParameter, profileImgParameter, bloodGroupParameter, genderParameter, roleParameter);
        }
    
        public virtual int Insert_PatientMembership(string patientID, string patientReffNo, string username, string password, string emailID, string countryCode, Nullable<long> phoneNumber, string firstName, string middleName, string lastName, string birthDate, string street, string city, string state, string country, string zipcode, string profileImg, string bloodGroup, Nullable<int> gender)
        {
            var patientIDParameter = patientID != null ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(string));
    
            var patientReffNoParameter = patientReffNo != null ?
                new ObjectParameter("PatientReffNo", patientReffNo) :
                new ObjectParameter("PatientReffNo", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var phoneNumberParameter = phoneNumber.HasValue ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(long));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var birthDateParameter = birthDate != null ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var zipcodeParameter = zipcode != null ?
                new ObjectParameter("Zipcode", zipcode) :
                new ObjectParameter("Zipcode", typeof(string));
    
            var profileImgParameter = profileImg != null ?
                new ObjectParameter("ProfileImg", profileImg) :
                new ObjectParameter("ProfileImg", typeof(string));
    
            var bloodGroupParameter = bloodGroup != null ?
                new ObjectParameter("BloodGroup", bloodGroup) :
                new ObjectParameter("BloodGroup", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_PatientMembership", patientIDParameter, patientReffNoParameter, usernameParameter, passwordParameter, emailIDParameter, countryCodeParameter, phoneNumberParameter, firstNameParameter, middleNameParameter, lastNameParameter, birthDateParameter, streetParameter, cityParameter, stateParameter, countryParameter, zipcodeParameter, profileImgParameter, bloodGroupParameter, genderParameter);
        }
    
        public virtual int Insert_Role(string role)
        {
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Role", roleParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ResetPassword(string id, string username, string email, string password, Nullable<int> source)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var sourceParameter = source.HasValue ?
                new ObjectParameter("source", source) :
                new ObjectParameter("source", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ResetPassword", idParameter, usernameParameter, emailParameter, passwordParameter, sourceParameter);
        }
    
        public virtual ObjectResult<ValidateUser_Result> ValidateUser(string username, string password, string role, Nullable<int> source)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(string));
    
            var sourceParameter = source.HasValue ?
                new ObjectParameter("source", source) :
                new ObjectParameter("source", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ValidateUser_Result>("ValidateUser", usernameParameter, passwordParameter, roleParameter, sourceParameter);
        }
    }
}
